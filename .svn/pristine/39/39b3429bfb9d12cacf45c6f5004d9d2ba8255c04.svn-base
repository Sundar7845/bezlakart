<?php

namespace App\Http\Controllers\Backend\Master;

use App\Http\Controllers\Controller;
use App\Models\State;
use App\Models\StateShippingCharge;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class StateShippingChargeController extends Controller
{
    public function stateShippingCharge()
    {
        $state = State::get();
        return view('backend.admin.master.stateshippingcharge.stateshippingcharge', compact('state'));
    }

    public function shippingChargeStore(Request $request)
    {

        $request->validate(
            [
                'ddlState' => 'required',
                'txtShippingCharge' => 'required',
            ],
            [
                'ddlState.required' =>  'State Name is Required',
                'txtShippingCharge.required' => 'Shipping Charge is Required',
            ]
        );

        DB::beginTransaction();
        try {

            if ($request->hdshippingId == null) {

                StateShippingCharge::Create([
                    'state_id' => $request->ddlState,
                    'shipping_charge' => $request->txtShippingCharge,
                    'created_at' => Carbon::now(),
                    'created_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'State Shipping Charge Created Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('stateshippingcharge')->with($notification);
            } else {

                StateShippingCharge::findorFail($request->hdshippingId)->update([
                    'state_id' => $request->ddlState,
                    'shipping_charge' => $request->txtShippingCharge,
                    'updated_at' => Carbon::now(),
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'State Shipping Charge Updated Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('stateshippingcharge')->with($notification);
            }
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "POST", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'error'
            );

            return redirect()->route('stateshippingcharge')->with($notification);
        }
    }

    public function getShippingChargeData()
    {
        $stateshippingcharge = StateShippingCharge::select('state_shipping_charges.*', 'states.state_name')
            ->join('states', 'states.id', 'state_shipping_charges.state_id')
            ->whereNull('state_shipping_charges.deleted_at')->get();
        return datatables()->of($stateshippingcharge)
            ->addColumn('action', function ($row) {
                $html = "";
                $html = '<i class="text-primary ri-pencil-line"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ri-delete-bin-6-line" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    function getShippingChargeById($id)
    {
        try {
            $stateshippingcharge = StateShippingCharge::where('id', $id)->first();
            return response()->json([
                'stateshippingcharge' => $stateshippingcharge
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteShippingCharge(Request $request, $id)
    {
        DB::beginTransaction();
        try {
            $shippingCharge = StateShippingCharge::findorfail($id);
            $shippingCharge->delete();
            $shippingCharge->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'State Shipping Charge Deleted Successfully',
                'alert' => 'success'
            );
            DB::commit();
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            $notification = array(
                'message' => 'State Shipping Charge could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }
}
