<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Traits\Common;
use App\Traits\ResponseAPI;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ProductController extends Controller
{
    use Common;
    use ResponseAPI;

    function products(Request $request)
    {
        try {
            $responseData = [];

            $responseData['products'] = [];
            $products = $this->getProducts($request->user_id);
            foreach ($products as $item) {
                $productDetails['product_id'] = $item->id;
                $productDetails['main_category_id'] = $item->main_category_id;
                $productDetails['main_category_name'] = $item->main_category_name;
                $productDetails['category_id'] = $item->category_id;
                $productDetails['category_name'] = $item->category_name;
                $productDetails['sub_category_id'] = $item->sub_category_id;
                $productDetails['sub_category_name'] = $item->sub_category_name;
                $productDetails['brand_id'] = $item->brand_id;
                $productDetails['brand_name'] = $item->brand_name;
                $productDetails['store_id'] = $item->store_id;
                $productDetails['store_name'] = $item->store_name;
                $productDetails['discount_type_id'] = $item->discount_type_id;
                $productDetails['discount_type'] = $item->discount_type;
                $productDetails['product_name'] = $item->product_name;
                $productDetails['product_price'] = $item->product_price;
                $productDetails['product_tags'] = $item->product_tags;
                $productDetails['product_stock'] = $item->product_stock;
                $productDetails['product_discount'] = $item->discount;
                $productDetails['commission_amount'] = $item->commission_amount;
                $productDetails['product_image'] = url($item->product_image);
                $productDetails['short_description'] = $item->short_description;
                $productDetails['description'] = $item->description;
                $productDetails['is_favourite'] = $item->is_favourite;
                array_push($responseData['products'], $productDetails);
            }

            return response()->json(['data' => $responseData], 200);
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 0, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), $e->getCode());
        }
    }

    function productDetail(Request $request, $product_id)
    {
        // try {

            $products = $this->getProductDetail($product_id, $request->user_id);
            $data = [
                'product_id' => $products->id,
                'main_category_id' => $products->main_category_id,
                'main_category_name' => $products->main_category_name,
                'category_id' => $products->category_id,
                'category_name' => $products->category_name,
                'sub_category_id' => $products->sub_category_id,
                'sub_category_name' => $products->sub_category_name,
                'brand_id' => $products->brand_id,
                'brand_name' => $products->brand_name,
                'store_id' => $products->store_id,
                'store_name' => $products->store_name,
                'discount_type_id' => $products->discount_type_id,
                'discount_type' => $products->discount_type,
                'product_name' => $products->product_name,
                'product_price' => $products->product_price,
                'product_tags' => $products->product_tags,
                'product_stock' => $products->product_stock,
                'product_discount' => $products->discount,
                'commission_amount' => $products->commission_amount,
                'product_image' => url($products->product_image),
                'short_description' => $products->short_description,
                'description' => $products->description,
                'is_favourite' => $products->is_favourite
            ];

            return response()->json(['data' => $data], 200);
        // } catch (Exception $e) {
        //     $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 0, request()->ip(), gethostname(), 1);
        //     return $this->error($e->getMessage(), $e->getCode());
        // }
    }
}
