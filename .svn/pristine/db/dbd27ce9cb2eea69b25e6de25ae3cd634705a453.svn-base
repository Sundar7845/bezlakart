<?php

namespace App\Http\Controllers\Backend\Module;

use App\Http\Controllers\Controller;
use App\Models\SystemModules;
use App\Traits\Common;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class ModuleController extends Controller
{
    use Common;

    public function module()
    {
        try {
            $systemModule = SystemModules::get();
            return view('backend.admin.module.module', compact('systemModule'));
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function moduleCreate(Request $request)
    {
        $request->validate(
            [
                'txtModuleName' => 'required',
                'fileModuleImage' => ($request->hdModuleId == null) ? 'required' : ''
                // Remove validation for update scenario
            ],
            [
                'txtModuleName.required' =>  'Module Name is Required',
                'fileModuleImage.required' => 'Module Image is Required'
            ]
        );

        DB::beginTransaction();
        try {
            if ($request->hdModuleId == null) {

                $lastInsertedSystemModuleId = SystemModules::insertGetId([
                    'module_name' => $request->txtModuleName,
                    'created_at' => Carbon::now(),
                    'created_by' => Auth::user()->id
                ]);

                if ($request->hasFile('fileModuleImage')) {
                    $file = $request->file('fileModuleImage');
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;

                    SystemModules::findorfail($lastInsertedSystemModuleId)->update([
                        'module_image' => $this->fileUpload($file, 'upload/module/' . $lastInsertedSystemModuleId, $fileName)
                    ]);
                }

                $notification = array(
                    'message' => 'System Module Created Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('module')->with($notification);
            } else {

                $oldImage = $request->hdModuleImage;
                if ($request->hasFile('fileModuleImage')) {
                    @unlink($oldImage);
                    $files = $request->file('fileModuleImage');
                    $extensions = $files->getClientOriginalExtension();
                    $fileNames = $this->generateRandom(16) . '.' . $extensions;
                }

                SystemModules::findorFail($request->hdModuleId)->update([
                    'module_name' => $request->txtModuleName,
                    'module_image' => ($request->hasFile('fileModuleImage')) ? $this->fileUpload($request->file('fileModuleImage'), 'upload/module/' . $request->hdModuleId, $fileNames) : $oldImage,
                    'updated_at' => Carbon::now(),
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'System Module Updated Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('module')->with($notification);
            }
        } catch (Exception $e) {
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, "POST", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            return redirect()->route('module')->with($notification);
        }
    }

    public function getModules()
    {
        $systemModule = SystemModules::whereNull('deleted_at')->get();
        return datatables()->of($systemModule)
            ->addColumn('action', function ($row) {
                $html = "";
                $html = '<i class="text-primary ri-pencil-line"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ri-delete-bin-6-line" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    function getModuleById($id)
    {
        try {
            $module = SystemModules::where('id', $id)->first();
            return response()->json([
                'module' => $module
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteModule(Request $request, $id)
    {
        DB::beginTransaction();
        try {
            $area = SystemModules::findorfail($id);
            $area->delete();
            $area->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Module Deleted Successfully',
                'alert' => 'success'
            );
            DB::commit();
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            $notification = array(
                'message' => 'Module could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function moduleActiveStatus($id, $status)
    {
        try {
            SystemModules::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
