<?php

namespace App\Http\Controllers\Backend\Master;

use App\Http\Controllers\Controller;
use App\Models\Banner;
use App\Models\BannerLocation;
use App\Models\BannerType;
use App\Models\Products;
use App\Models\Store;
use App\Models\SystemModules;
use App\Traits\Common;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class BannerController extends Controller
{
    use Common;

    function banner()
    {
        $bannerType = BannerType::get();
        $systemModule  = SystemModules::where('is_active', 1)->whereNull('deleted_at')->get();
        $store = Store::where('is_active', 1)->whereNull('deleted_at')->get();
        $product = Products::where('is_active', 1)->whereNull('deleted_at')->get();
        $bannerLocation = BannerLocation::get();
        return view('backend.admin.master.banner.banner', compact('bannerType', 'systemModule', 'store', 'product', 'bannerLocation'));
    }

    function bannercreate(Request $request)
    {
        $request->validate([
            'txtBannerName' => 'required',
            'ddlSystemModule' => 'required',
            'ddlBannerType' => 'required',
            'ddlBannerLocation' => 'required',
            'ddlStore' => 'required',
            'fileBannerImage' => $request->hdBannerId == null ? 'required|dimensions:width=' . $request->hdWidth . ',height=' . $request->hdHeight . '' : ''
        ], [
            'txtBannerName.required' => 'The Banner Name is required',
            'ddlSystemModule.required' => 'The System Module is required',
            'ddlBannerType.required' => 'The Banner Type is required',
            'ddlBannerLocation.required' => 'The Banner Location is required',
            'ddlStore.required' => 'The Store is required',
            'fileBannerImage.required' => 'The Banner Image is required',
            'fileBannerImage.dimensions' => 'Please upload image dimension in ' . $request->hdWidth . ' x ' . $request->hdHeight . ' px',

        ]);
        DB::transaction();
        try {
            if ($request->hdBannerId == null) {
                $banner = Banner::create([
                    'banner_name' => $request->txtBannerName,
                    'banner_location_id' => $request->ddlBannerlocation,
                    'system_module_id' => $request->ddlSystemModule,
                    'banner_type_id' => $request->ddlBannerType,
                    'banner_url' => $request->txtBannerUrl,
                    'store_id' => $request->ddlStore,
                    'created_by' => Auth::user()->id
                ]);

                if ($request->hasFile('fileBannerImage')) {
                    $file = $request->file('fileBannerImage');
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;

                    Banner::findorfail($banner->id)->update([
                        'banner_image' => $this->fileUpload($file, 'upload/banner/' . $banner->id, $fileName)
                    ]);
                }

                $notification = array(
                    'message' => 'Banner Created Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('banner')->with($notification);
            } else {
                $oldImage = $request->hdBannerImage;
                if ($request->hasFile('fileBannerImage')) {
                    @unlink($oldImage);
                    $files = $request->file('fileBannerImage');
                    $extensions = $files->getClientOriginalExtension();
                    $fileNames = $this->generateRandom(16) . '.' . $extensions;
                }

                $banner = Banner::findorfail($request->hdBannerId)->update([
                    'banner_name' => $request->txtBannerName,
                    'system_module_id' => $request->ddlSystemModule,
                    'banner_type_id' => $request->ddlBannerType,
                    'banner_location_id' => $request->ddlBannerlocation,
                    'banner_url' => $request->txtBannerUrl,
                    'store_id' => $request->ddlStore,
                    'banner_image' => ($request->hasFile('fileBannerImage')) ? $this->fileUpload($request->file('fileBannerImage'), 'upload/banner/' . $request->hdBannerId, $fileNames) : $oldImage,
                    'updated_by' => Auth::user()->id
                ]);
                $notification = array(
                    'message' => 'Banner Updated Successfully',
                    'alert-type' => 'success'
                );

                DB::commit();
                return redirect()->route('banner')->with($notification);
            }
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            $notification = array(
                'message' => 'Something went Wrong!',
                'alert' => 'error'
            );
            return redirect()->route('banner')->with($notification);
        }
    }

    function bannerData()
    {
        $banner = Banner::select('banners.*', 'system_modules.module_name', 'banner_types.banner_type')
            ->join('system_modules', 'system_modules.id', 'banners.system_module_id')
            ->join('banner_types', 'banner_types.id', 'banners.banner_type_id')
            ->whereNull('banners.deleted_at')
            ->get();
        return datatables()->of($banner)
            ->addColumn('action', function ($row) {
                $html = "";
                $html = '<i class="text-primary ri-pencil-line"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ri-delete-bin-6-line" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    function getBannerById($id)
    {
        try {
            $banner = Banner::where('id', $id)->first();
            return response()->json([
                'banner' => $banner
            ]);
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    function getBannerSizeByBannerLocation(Request $request)
    {
        try {
            $bannersize = BannerLocation::where('id', $request->banner_location_id)->first();
            return response()->json([
                'bannersize' => $bannersize
            ]);
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteBanner($id)
    {
        DB::beginTransaction();
        try {
            $brand = Banner::findorfail($id);
            $brand->delete();
            $brand->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Banner Deleted Successfully',
                'alert' => 'success'
            );
            DB::commit();
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            $notification = array(
                'message' => 'Banner could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function BannerActiveStatus($id, $status)
    {
        try {
            banner::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
        } catch (Exception $e) {
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
